
해당 프로젝트 파일은 리눅스 시스템의 웹서버 폴더에 넣으면 동작합니다.
ex). var/www/project_os
폴더 경로가 다른 경우 위 경로를 다르게 설정해주면 됩니다.

main.c
/*
*******************************************************************
 컨트롤 프로그램의 메인 부분으로 GPIO 설정 파일을 읽어오고 설정된 형태에 맞춰서
 동작하도록 함수를 호출한다. 호출된 함수는 각각의 C코드 파일로 분할하여 작성 하였다.
 각각의 코드 상단에 주석으로 설명을 추가 하였다.

 메인 부분의 기본 동작은 while문으로 loop를 통해서 핀 숫자 1 ~ 14, 또는 1 ~ 20 까지 등 
 루프문으로 동작한다. 
*******************************************************************
*/

filepointer.c
/*
*******************************************************************
이 코드는 이번 프로젝트에서 만든 함수들 중에서 중복적으로 많이 사용되는
기능을 한곳으로 모아둔 코드이다. 이 함수들을 중심으로 모든 기능이 구현되고
심볼릭 링크를 생성하는 export, 입출력 방향을 설정하는 direction등 이 존재한다.
헤더파일에 선언하여 다른 c파일에서 활용할 수 있다.

현재 구현되어 있는 C파일에서 대표적으로 활용되는 함수 기능을 묶은 파일
*******************************************************************
*/

gpioCompare.c
/*
*******************************************************************
이 코드는 gpio 비교를 구현한 것이다. C프로그램에서 주로 사용되는 if문을 구현하기
위해서 만들었다. 웹상에서 간단한 if동작을 할 수 있도록 도와준다.

이 코드를 활용하기 위해 매칭되는 DB는 gpio_compare가 있다. 
gpio 번호, 조건 , 값이 저장되어있다.

*******************************************************************
*/

insert_DB.c
/*
*******************************************************************
이 코드는 DB에 데이터가 저장되는 기능을 구현한 것이다. 
입력 되는 값을 읽고 해당 DB에 데이터를 저장한다. 입력 전 compare와 pair기능을 체크하고
마지막에 입력한다.
*******************************************************************
*/

output_DB.c

/*
*******************************************************************
이 코드는 디지털 출력을 위해서 사용된 코드이다. 
데이터를 DB에서 읽고 해당 출력에 맞춰서 동작한다.

compare와 pair를 체크하여 동작한다.

*******************************************************************
*/
output_analog.c

/*
*******************************************************************
이 코드는 PWM 출력을 위해서 구현된 것이다. period, duty 등 필요한 설정을 하고,
컴페어 동작을 체크하고 동작한다.

*******************************************************************
*/

time.c
/*
*******************************************************************
이코드는 리눅스의 시간를 나타내는 time을 이용하여 타이머를 구현한 코드이다.
Time_DB의 값에는 Pin#, Timer#, 현재상태값 ex)3 10 0 이 입력이 되면 그 값을 읽어
시간의 흐름에 따라서 Timer#을 줄여서 0이 되면 해당 Pin#의 상태를 제어할 수 있도록 구현하였다.
*******************************************************************
*/

UART=======================================================================================

insertUart.c
/*
*******************************************************************
이 코드는 uart를 자식 프로세스로 동작시키기 위해 만든 main 구문이다.
이 main문을 중심으로 uart 실행 파일이 생성되고, 메인 프로그램에서 호출할때, 자식프로세스로서 동작한다.

환경설정 파일에서 데이터를 읽고 해당 데이터가 송신인지 수신인지를 체크하여 동작하도록 하였다.
*******************************************************************
*/

rxUart.c
/*
*******************************************************************
이 코드는 uart의 rx를 활용하기 위해서 사용되는 코드이다. 
외부 라이브러리 wiringPI와 리눅스의 dev/ttyS0를 활용하였다. 
환경설정 파일에 있는 설정 명령과 Baudrate를 읽어오고, '-' 시작 문자와 '=' 종료 문자를 통해서 
구현되었다.
데이터가 수신되는 dev/ttyS0에서 시작문자와 종료문자를 찾아서 배열에 저장하고 저장된 배열을 DB에 저장하는
형태로 데이터가 수신되는 형태이다.
*******************************************************************
*/

txUart.c
/*
*******************************************************************
이 코드는 uart의 tx를 활용하기 위해서 사용되는 코드이다. 
외부 라이브러리 wiringPI와 리눅스의 dev/ttyS0를 활용하였다. 
환경설정 파일에 있는 설정 명령과 Baudrate를 읽어오고, '-' 시작 문자와 '=' 종료 문자를 통해서 
구현되었다.
데이터가 저장되있는 파일에서 시작문자와 종료문자를 찾아서 배열에 저장하고 저장된 배열을 dev/ttyS0에 저장하여
데이터가 전송되는 형태이다.
*******************************************************************
*/

wriringSerial.c = wriringPI 외부 라이브러리







